//    Copyright (c) 2020, 2022 Red Hat, IBM Corporation and others.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

syntax = "proto3";


option java_multiple_files = true;
option java_package = "io.kruize.hpo";
option java_outer_classname = "Hpo";
option objc_class_prefix = "HLW";

package helloworld;

// The hpo service definition.
service HpoService {
  rpc NumberExperiments(NumberExperimentsParams) returns (NumberExperimentsReply) {}
  rpc ExperimentsList(ExperimentsListParams) returns (ExperimentsListReply) {}
  rpc NewExperiment(ExperimentDetails) returns (NewExperimentsReply) {}
  rpc GetExperimentDetails(ExperimentNameParams) returns (ExperimentDetails) {}
  rpc GetTrialConfig(ExperimentTrial) returns (TrialConfig) {}
  rpc UpdateTrialResult(ExperimentTrialResult) returns (ExperimentTrialReply) {}
  rpc GenerateNextConfig(ExperimentNameParams) returns (NewExperimentsReply) {}
}

message NumberExperimentsReply {
  int32 count = 1;
}

message NewExperimentsReply {
  int32 trial_number = 1;
}

message ExperimentsListReply {
  repeated string experiment = 1;
}

message NumberExperimentsParams {}

message ExperimentsListParams {}

message ExperimentTrialReply{}

message ExperimentNameParams {
  string experiment_name = 1;
}

message ExperimentTrial {
  string experiment_name = 1;
  int32 trial = 2;
}

message ExperimentTrialResult{
  enum Result {
    SUCCESS = 0;
    FAILURE = 1;
    PRUNE = 2;
  }

  string experiment_name = 1;
  int32 trial = 2;
  Result result = 3;
  string value_type = 4;
  double value = 5;
}

message ExperimentDetails {
  message Tunable{
      string value_type = 1;
      int32 lower_bound = 2;
      string name = 3;
      int32 upper_bound = 4;
      double step = 5;
  }

  string experiment_name = 1;
  int32 total_trials = 2;
  int32 parallel_trials = 3;
  string direction = 4;
  string hpo_algo_impl = 5;
  string experiment_id = 6;
  string objective_function= 7;
  repeated Tunable tuneables = 8;
  string value_type= 9;
  string slo_class = 10;
  bool started = 11;
}

message TunableConfig {
  string name = 1;
  float value = 2;
}

message TrialConfig {
  repeated TunableConfig config = 1;
}


